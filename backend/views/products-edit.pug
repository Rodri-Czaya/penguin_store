extends layout

block title
    | Edit Product

block content
    .form-container
        .form-header
            h1 Edit Product
            a.back-link(href=`/products?token=${token}`) ← Back to Products
        
        form#editProductForm
            .form-group
                label(for="name") Product Name
                input#name(type="text", name="name", value=product.name required)
            
            .form-group
                label(for="price") Price ($)
                input#price(type="number", name="price", step="0.01", value=product.price required)
            
            .form-group
                label(for="description") Description
                textarea#description(name="description", rows="4")= product.description
            
            .form-group
                label(for="imageUrl") Image URL (optional)
                input#imageUrl(type="text", name="imageUrl", value=product.imageUrl)
            
            button.submit-button(type="submit") Save Changes
            button.button.delete-button(type="button", onclick="deleteProduct()") Delete Product

block scripts
    script.
        document.getElementById('editProductForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = {
                name: formData.get('name'),
                price: parseFloat(formData.get('price')),
                description: formData.get('description'),
                imageUrl: formData.get('imageUrl')
            };

            try {
                const response = await fetch(`/products/#{product._id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer #{token}`
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    window.location.href = `/products?token=#{token}`;
                } else {
                    const error = await response.json();
                    alert(error.message || 'Error updating product');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating product');
            }
        });

        async function deleteProduct() {
            if (!confirm('Are you sure you want to delete this product?')) {
                return;
            }

            try {
                const response = await fetch(`/products/#{product._id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer #{token}`
                    }
                });

                if (response.ok) {
                    window.location.href = `/products?token=#{token}`;
                } else {
                    alert('Error deleting product');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting product');
            }
        }